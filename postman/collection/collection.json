{
	"info": {
		"_postman_id": "6ce2ef78-5a01-419a-a2cc-08f968e305ae",
		"name": "Local Service Registry",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22659041"
	},
	"item": [
		{
			"name": "Register One Service",
			"item": [
				{
					"name": "Fetch All Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v1\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ensure New Service Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All statuses are STARTING\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData[\"test-application-v1\"].forEach(function (app) {\r",
									"        pm.expect(app.status).to.eql(\"STARTING\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log('Sleep for 3 seconds complete');\r",
									"}, 3000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{server}}/automation-testing/jobs/health-checks",
							"host": [
								"{{server}}"
							],
							"path": [
								"automation-testing",
								"jobs",
								"health-checks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ensure Health Check Failed and Is Down",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All statuses are DOWN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData[\"test-application-v1\"].forEach(function (app) {\r",
									"        pm.expect(app.status).to.eql(\"DOWN\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register Two Services",
			"item": [
				{
					"name": "Register First New Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v2\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Second New Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v2\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.11\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ensure New Services Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the length is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var length = jsonData[\"test-application-v2\"].length;\r",
									"\r",
									"    pm.expect(length == 2).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"All statuses are STARTING\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData[\"test-application-v2\"].forEach(function (app) {\r",
									"        pm.expect(app.status).to.eql(\"STARTING\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{server}}/automation-testing/jobs/health-checks",
							"host": [
								"{{server}}"
							],
							"path": [
								"automation-testing",
								"jobs",
								"health-checks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ensure Health Check Failed and Removes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure the length is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var length = jsonData[\"test-application-v2\"].length;\r",
									"\r",
									"    pm.expect(length == 2).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"All statuses are DOWN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData[\"test-application-v2\"].forEach(function (app) {\r",
									"        pm.expect(app.status).to.eql(\"DOWN\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function() {\r",
									"    console.log('Sleep for 5 seconds complete');\r",
									"}, 5000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register And Deregister",
			"item": [
				{
					"name": "Register New Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v3\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deregister Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v3\",\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"version\": 1,\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ensure Service Deregistered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"test-application-v3 is not a key\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    var keys = Object.keys(jsonData);\r",
									"\r",
									"    pm.expect(keys).to.not.include(\"test-application-v3\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Heartbeat",
			"item": [
				{
					"name": "Heatbeat Reregister",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response matches expected data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedData = {\r",
									"        \"event\": \"RE_REGISTER\",\r",
									"        \"description\": \"Heartbeat not found, registry required\"\r",
									"    };\r",
									"    pm.expect(jsonData).to.eql(expectedData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v4\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/heartbeat",
							"host": [
								"{{server}}"
							],
							"path": [
								"heartbeat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register New Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v4\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/service-registry",
							"host": [
								"{{server}}"
							],
							"path": [
								"service-registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "Heartbeat Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response matches expected data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedData = {\r",
									"        \"event\": \"FOUND\",\r",
									"        \"description\": \"Heartbeat Found\"\r",
									"    };\r",
									"    pm.expect(jsonData).to.eql(expectedData);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicationName\": \"test-application-v4\",\r\n    \"applicationVersion\": 1,\r\n    \"url\": \"http://10.10.10.10\",\r\n    \"port\": 8080\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/heartbeat",
							"host": [
								"{{server}}"
							],
							"path": [
								"heartbeat"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}